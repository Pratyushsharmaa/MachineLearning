import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

dataset = pd.read_csv('Mall_Customers.csv')
#Check number of rows and columns
dataset.shape

dataset.describe()

dataset.info()

#Check for null values
dataset.isnull().sum()

#Plot missing values(null in thiscase)
import missingno as msno
msno.matrix(dataset)

#Data Visualization
dataset.columns

plt.figure(figsize = (16,5))

plt.subplot(1,3,1)
sns.distplot(dataset['Age'])
plt.title('Distribution of age')
plt.xlabel('Range of age')
plt.ylabel('Count')

plt.subplot(1,3,2)
sns.distplot(dataset['Annual Income (k$)'])
plt.title('Distribution of income')
plt.xlabel('Range of income')
plt.ylabel('Count')

plt.subplot(1,3,3)
sns.distplot(dataset['Spending Score (1-100)'])
plt.title('Distribution of Spending Score')
plt.xlabel('Range of Spending Score')
plt.ylabel('Count')

df = dataset.groupby('Gender').size()
df.plot(kind='pie', autopct = '%.2f%%')

X = dataset.iloc[:, [3, 4]].values

from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters = 5, init = 'k-means++', random_state = 42)
y_kmeans = kmeans.fit_predict(X)

plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], c = 'red', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], c = 'green', label = 'Cluster 3')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], c = 'cyan', label = 'Cluster 4')
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], c = 'magenta', label = 'Cluster 5')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()
