import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_csv('LoanData.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

#Finding missing data

missing_data = dataset.isnull().sum()
print("Missing data:\n", missing_data)

dataset.describe()

#Encoding categorical data using mode
dataset['Gender'] = dataset['Gender'].fillna(dataset['Gender'].mode()[0])
dataset['Married'] = dataset['Married'].fillna(dataset['Married'].mode()[0])
dataset['Dependents'] = dataset['Dependents'].fillna(dataset['Dependents'].mode()[0])
dataset['Self_Employed'] = dataset['Self_Employed'].fillna(dataset['Self_Employed'].mode()[0])

dataset.isnull().sum()

#Encoding numerical data using median
dataset['LoanAmount'] = dataset['LoanAmount'].fillna(dataset['LoanAmount'].median())
dataset['Loan_Amount_Term'] = dataset['Loan_Amount_Term'].fillna(dataset['Loan_Amount_Term'].median())
dataset['Credit_History'] = dataset['Credit_History'].fillna(dataset['Credit_History'].median())
dataset['CoapplicantIncome'] = dataset['CoapplicantIncome'].fillna(dataset['CoapplicantIncome'].median())

dataset.isnull().sum()

#Visual depiction
plt.style.use('fivethirtyeight')
plt.rcParams['figure.figsize'] = (15,8)

plt.subplot(1,3,1) #1 row, 3 graphs and row no 1
sns.boxplot(dataset['ApplicantIncome'])

plt.subplot(1,3,2) #1 row, 3 graphs and row no 2
sns.boxplot(dataset['CoapplicantIncome'])

plt.subplot(1,3,3) #1 row, 3 graphs and row no 3
sns.boxplot(dataset['LoanAmount'])

plt.show()

#Handling Outliers
print("Before removing outliers", dataset.shape)
dataset = dataset[dataset['ApplicantIncome']<20000]
print("After removing outliers", dataset.shape)

print("Before removing outliers", dataset.shape)
dataset = dataset[dataset['CoapplicantIncome']<10000]
print("After removing outliers", dataset.shape)

print("Before removing outliers", dataset.shape)
dataset = dataset[dataset['LoanAmount']<400]
print("After removing outliers", dataset.shape)

plt.subplot(1,3,1)
sns.distplot(dataset['ApplicantIncome'], color = 'red')

plt.subplot(1,3,2)
sns.distplot(dataset['CoapplicantIncome'], color = 'red')

plt.subplot(1,3,3)
sns.distplot(dataset['LoanAmount'], color = 'red')

#Normalize above data
dataset['ApplicantIncome'] = np.log(dataset['ApplicantIncome'])
dataset['CoapplicantIncome'] = np.log(dataset['CoapplicantIncome'])


plt.subplot(1,3,1)
sns.distplot(dataset['ApplicantIncome'], color = 'green')

plt.subplot(1,3,2)
sns.distplot(dataset['CoapplicantIncome'], color = 'green')

plt.subplot(1,3,3)
sns.distplot(dataset['LoanAmount'], color = 'green')

plt.title('Normalized Data')

#Splitting numerical data and categorical data.
num = dataset.select_dtypes('number').columns.tolist()
cat = dataset.select_dtypes('object').columns.tolist()
print (num)
print(cat)

for i in cat[:-1]: 
  plt.figure(figsize = (15,10))
  plt.subplot(2,3,1)
  sns.countplot(x=i,hue = 'Loan_Status', data = dataset, palette = 'plasma')
  plt.xlabel(i, fontsize = 15)

dataset.select_dtypes('object').head()

dataset.drop('Loan_ID', axis=1, inplace=True)

#Change categorical value to numerical value
dataset['Gender'] = dataset['Gender'].replace(('Male', 'Female'),(1,0))
dataset['Married'] = dataset['Married'].replace(('No', 'Yes'),(0,1))
dataset['Dependents'] = dataset['Dependents'].replace(('0', '1','2','3+'),(0,1,1,1))
dataset['Education'] = dataset['Education'].replace(('Graduate', 'Not Graduate'),(1,0))
dataset['Self_Employed'] = dataset['Self_Employed'].replace(('Yes', 'No'),(1,0))
dataset['Property_Area'] = dataset['Property_Area'].replace(('Urban', 'Semiurban','Rural'),(1,1,0))
dataset['Loan_Status'] = dataset['Loan_Status'].replace(('Y', 'N'),(1,0))

dataset.head()

y = dataset['Loan_Status']
X = dataset.drop(['Loan_Status'] , axis = 1)
X.shape
X.columns
y.shape

#Splitting data into training and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)
X_train
X_test
y_train
y_test

X_train.shape
X_test.shape

#Training logistic regression model on training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

#Predicting test set results
y_pred = classifier.predict(X_test)

#Accuracy Score
print('Training accuracy', classifier.score(X_train, y_train))
print('Test accuracy', classifier.score(X_test, y_test))

#Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

#Model Prediction
model_pred = np.array([[1,1,1,0,1,3924,1733,148.0,360,0,1]])
prediction = classifier.predict(model_pred)
print(prediction[0])
